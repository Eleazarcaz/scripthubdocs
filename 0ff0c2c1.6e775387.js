(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{141:function(e,a,n){"use strict";n.r(a),n.d(a,"frontMatter",(function(){return t})),n.d(a,"rightToc",(function(){return i})),n.d(a,"default",(function(){return l}));n(51),n(24),n(19),n(20),n(52),n(0);var o=n(221);function s(){return(s=Object.assign||function(e){for(var a=1;a<arguments.length;a++){var n=arguments[a];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e}).apply(this,arguments)}var t={id:"programacion orientada a objetos",title:"Programaci\xf3n orientada a objetos (POO)",sidebar_label:"Programaci\xf3n orientada a objetos"},i=[{value:"Introducci\xf3n",id:"introducci\xf3n",children:[]},{value:"Objetos",id:"objetos",children:[]},{value:"Clases",id:"clases",children:[{value:"Initialize",id:"initialize",children:[]},{value:"Clase Staff",id:"clase-staff",children:[]}]},{value:"M\xf3dulos",id:"m\xf3dulos",children:[{value:"Utilidad de los m\xf3dulos",id:"utilidad-de-los-m\xf3dulos",children:[]},{value:"Utilizando m\xf3dulos externos",id:"utilizando-m\xf3dulos-externos",children:[]}]},{value:"Herencia",id:"herencia",children:[]}],r={rightToc:i},d="wrapper";function l(e){var a=e.components,n=function(e,a){if(null==e)return{};var n,o,s={},t=Object.keys(e);for(o=0;o<t.length;o++)n=t[o],a.indexOf(n)>=0||(s[n]=e[n]);return s}(e,["components"]);return Object(o.b)(d,s({},r,n,{components:a,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"introducci\xf3n"},"Introducci\xf3n"),Object(o.b)("p",null,"La Programaci\xf3n Orientada a Objetos, como hemos visto al inicio de la gu\xeda, es un tipo de programaci\xf3n en el cual todo es un objeto y cada objeto tiene sus atributos, m\xe9todos y funciones \xfanicas; tambi\xe9n tiene conceptos como las clases, la herencia y m\xe1s."),Object(o.b)("p",null,"Ahora, veremos qu\xe9 son cada uno de estos conceptos, c\xf3mo y cu\xe1ndo usarlos."),Object(o.b)("h2",{id:"objetos"},"Objetos"),Object(o.b)("p",null,"En Ruby, todo es un objeto, es decir, no se declaran tipos de variables o m\xe9todos. Los objetos de Ruby siempre pueden modificarse, agregarles m\xe9todos posteriormente a su creaci\xf3n, etc... Por lo cual sus comportamientos, pueden alejarse de aquel definido en su clase/m\xe9todo."),Object(o.b)("p",null,"Los objetos son contenedores de datos, que a su vez, controlan el acceso a dichos datos. "),Object(o.b)("h2",{id:"clases"},"Clases"),Object(o.b)("p",null,"Las clases son usadas para la construcci\xf3n de objetos, en otras palabras, es un molde para los objetos. Por ejemplo, podemos crear una clase llamada ",Object(o.b)("inlineCode",{parentName:"p"},"Staff")," y hacer varios tipos de staff, cada uno con sus propios atributos, m\xe9todos."),Object(o.b)("h3",{id:"initialize"},"Initialize"),Object(o.b)("p",null,"Initialize es una funci\xf3n de las clases, la cual es ejecutado cuando la clase es ejecutada, en otras palabras, es la parte inicial de una clase."),Object(o.b)("h3",{id:"clase-staff"},"Clase Staff"),Object(o.b)("pre",null,Object(o.b)("code",s({parentName:"pre"},{className:"language-rb"}),'class Staff\n    def initialize\n        puts "Estos son todos los staff de ScriptHub: "\n    end\n\n    def administradores\n        puts "Administradores: Monspeet, Lauuu, Devsaider"\n    end\n\n    def moderadores\n        puts "Moderadores: Mon, Axel, BulzyKrown"\n    end\n\n    def managers\n        puts "Manager. Comunidad: gameboy, Josu\xe9"\n    end\n\n    def tecnicos\n        puts "T\xe9cnicos: Tati, Agate"\n    end\nend\n\nstaff = Staff.new # Ejecutamos la clase Staff\n# => "Estos son todos los staff de ScriptHub: "\nstaff.administradores\n# => "Administradores: Monspeet, Lauuu, Devsaider"\nstaff.moderadores\n# => "Moderadores: Mon, Axel, BulzyKrown"\nstaff.managers\n# => "Manager. Comunidad: gameboy, Josu\xe9"\nstaff.tecnicos\n# => "T\xe9cnicos: Tati, Agate"\n')),Object(o.b)("h2",{id:"m\xf3dulos"},"M\xf3dulos"),Object(o.b)("p",null,"Los m\xf3dulos son similares a las clases, en el hecho de que almacenan una colecci\xf3n de objetos, m\xe9todos, funciones y otros m\xf3dulos. Sin embargo, los m\xf3dulos no pueden ejecutarse por s\xed solos, dependen de una clase."),Object(o.b)("h3",{id:"utilidad-de-los-m\xf3dulos"},"Utilidad de los m\xf3dulos"),Object(o.b)("p",null,"Su primera utilidad es el actuar como una librer\xeda, que almacena m\xe9todos que no interfieren con otros de diferentes lugares del c\xf3digo. Para que una clase utilice un m\xf3dulo, debe usar el m\xe9todo ",Object(o.b)("inlineCode",{parentName:"p"},"include"),"."),Object(o.b)("p",null,"Su segunda utilidad, ser\xeda el de aumentar la funcionalidad de las clases, es decir, si una clase utiliza un m\xf3dulo, dicha clase podr\xe1 utilizar todos los objetos del m\xf3dulo."),Object(o.b)("pre",null,Object(o.b)("code",s({parentName:"pre"},{className:"language-rb"}),'module Guias\n    def Guias.ruby\n        puts "Ruby | Estado actual: stable"\n    end\n\n    def Guias.python\n        puts "Python | Estado actual: beta"\n    end\n\n    def Guias.discord\n        puts "Discord | Estado actual: alpha"\n    end\nend\n\nclass ScriptHub\n    include Guias # Llamamos al m\xf3dulo Guias\n\n    def initialize\n        puts "Listado de gu\xedas"\n        Guias.ruby\n        Guias.python\n        Guias.discord\n    end\nend\n\nguias = ScriptHub.new\n=begin\n=> Listado de gu\xedas\n=> Ruby | Estado actual: stable\n=> Python | Estado actual: beta\n=> Discord | Estado actual: alpha\n=end\n')),Object(o.b)("h3",{id:"utilizando-m\xf3dulos-externos"},"Utilizando m\xf3dulos externos"),Object(o.b)("p",null,"Para utilizar m\xf3dulos externos, deberemos utilizar ",Object(o.b)("inlineCode",{parentName:"p"},"require")," junto con el nombre del archivo del m\xf3dulo en una cadena de Strings."),Object(o.b)("pre",null,Object(o.b)("code",s({parentName:"pre"},{className:"language-rb"}),'# guias.rb\nmodule Guias\n    def Guias.ruby\n        puts "Ruby | Estado actual: stable"\n    end\n\n    def Guias.python\n        puts "Python | Estado actual: beta"\n    end\n\n    def Guias.discord\n        puts "Discord | Estado actual: alpha"\n    end\nend\n\n# app.rb\nrequire "guias"\n\nclass ScriptHub\n    include Guias # Llamamos al m\xf3dulo Guias\n\n    def initialize\n        puts "Listado de gu\xedas"\n        Guias.ruby\n        Guias.python\n        Guias.discord\n    end\nend\n\nguias = ScriptHub.new\n=begin\n=> Listado de gu\xedas\n=> Ruby | Estado actual: stable\n=> Python | Estado actual: beta\n=> Discord | Estado actual: alpha\n=end\n')),Object(o.b)("h2",{id:"herencia"},"Herencia"),Object(o.b)("p",null,"La Herencia como su nombre lo indica, consiste en heredar objetos, m\xe9todos y funciones de una clase a otra, por ejemplo, de la clase Animales, heredar sus objetos a la clase Perro."),Object(o.b)("pre",null,Object(o.b)("code",s({parentName:"pre"},{className:"language-rb"}),'class Animales\n    def ladrar\n        puts "Guau, guau!"\n    end\n    \n    def maullar\n        puts "Miau, miau!"\n    end\nend\n\nclass Perro < Animales\n    def initialize\n        ladrar\n    end\nend\n\nladrar = Perro.new\n# => "Guau, guau!"\n')))}l.isMDXComponent=!0},221:function(e,a,n){"use strict";n.d(a,"a",(function(){return r})),n.d(a,"b",(function(){return c}));var o=n(0),s=n.n(o),t=s.a.createContext({}),i=function(e){var a=s.a.useContext(t),n=a;return e&&(n="function"==typeof e?e(a):Object.assign({},a,e)),n},r=function(e){var a=i(e.components);return s.a.createElement(t.Provider,{value:a},e.children)};var d="mdxType",l={inlineCode:"code",wrapper:function(e){var a=e.children;return s.a.createElement(s.a.Fragment,{},a)}},u=Object(o.forwardRef)((function(e,a){var n=e.components,o=e.mdxType,t=e.originalType,r=e.parentName,d=function(e,a){var n={};for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&-1===a.indexOf(o)&&(n[o]=e[o]);return n}(e,["components","mdxType","originalType","parentName"]),u=i(n),c=o,b=u[r+"."+c]||u[c]||l[c]||t;return n?s.a.createElement(b,Object.assign({},{ref:a},d,{components:n})):s.a.createElement(b,Object.assign({},{ref:a},d))}));function c(e,a){var n=arguments,o=a&&a.mdxType;if("string"==typeof e||o){var t=n.length,i=new Array(t);i[0]=u;var r={};for(var l in a)hasOwnProperty.call(a,l)&&(r[l]=a[l]);r.originalType=e,r[d]="string"==typeof e?e:o,i[1]=r;for(var c=2;c<t;c++)i[c]=n[c];return s.a.createElement.apply(null,i)}return s.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);
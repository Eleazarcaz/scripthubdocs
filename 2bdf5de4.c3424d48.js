(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{151:function(e,n,a){"use strict";a.r(n),a.d(n,"frontMatter",(function(){return t})),a.d(n,"rightToc",(function(){return l})),a.d(n,"default",(function(){return c}));a(51),a(24),a(19),a(20),a(52),a(0);var r=a(221);function o(){return(o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var a=arguments[n];for(var r in a)Object.prototype.hasOwnProperty.call(a,r)&&(e[r]=a[r])}return e}).apply(this,arguments)}var t={id:"adentrandonos mas",title:"Adentr\xe1ndonos m\xe1s en el lenguaje",sidebar_label:"Algo m\xe1s complejo"},l=[{value:"Funciones",id:"funciones",children:[]},{value:"Rangos",id:"rangos",children:[]},{value:"Arrays",id:"arrays",children:[]},{value:"Hashes",id:"hashes",children:[{value:"Usando s\xedmbolos como \xedndices",id:"usando-s\xedmbolos-como-\xedndices",children:[]}]},{value:"Bloques",id:"bloques",children:[{value:"Yield",id:"yield",children:[]}]},{value:"Condicionales",id:"condicionales",children:[{value:"IF / ELSIF",id:"if--elsif",children:[]},{value:"IF / ELSE IF",id:"if--else-if",children:[]},{value:"Diferencias IF/ELSIF - IF/ELSE IF",id:"diferencias-ifelsif---ifelse-if",children:[]},{value:"Operadores condicionales",id:"operadores-condicionales",children:[]},{value:"Condicionales negativas",id:"condicionales-negativas",children:[]},{value:"UNLESS",id:"unless",children:[]},{value:"Case",id:"case",children:[]}]},{value:"Bucles",id:"bucles",children:[{value:"While",id:"while",children:[]},{value:"Until",id:"until",children:[]},{value:"Loop",id:"loop",children:[]},{value:"For",id:"for",children:[]},{value:"Comandos",id:"comandos",children:[]}]},{value:"IRB",id:"irb",children:[]}],s={rightToc:l},i="wrapper";function c(e){var n=e.components,a=function(e,n){if(null==e)return{};var a,r,o={},t=Object.keys(e);for(r=0;r<t.length;r++)a=t[r],n.indexOf(a)>=0||(o[a]=e[a]);return o}(e,["components"]);return Object(r.b)(i,o({},s,a,{components:n,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"funciones"},"Funciones"),Object(r.b)("p",null,"Las funciones son un conjunto de l\xedneas de c\xf3digo que\xa0realizan tareas espec\xedficas y que retornan un valor. Las funciones tambi\xe9n pueden tener par\xe1metros que modifiquen su funcionamiento."),Object(r.b)("p",null,"Las funciones en Ruby se inician mediante ",Object(r.b)("inlineCode",{parentName:"p"},"def nombre")," y cierran con ",Object(r.b)("inlineCode",{parentName:"p"},"end"),". Estas pueden realizar m\xfaltiples tareas y pueden ser anidadas dentro de otras funciones sin problemas. \xa1Las funciones tambi\xe9n se pueden iniciar dentro de clases y m\xf3dulos!"),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-rb"}),'# Ejemplo de funciones\ndef funcion\n    puts "\xa1Esta es una funci\xf3n!"\nend\n\n# Las funciones se ejecutan con su nombre.\nfuncion # => "\xa1Esta es una funci\xf3n!"\n')),Object(r.b)("h4",{id:"funciones-con-par\xe1metros"},"Funciones con par\xe1metros"),Object(r.b)("p",null,"Las funciones tambi\xe9n pueden tener par\xe1metros que alteren su funcionamiento, y sean de mayor utilidad. A continuaci\xf3n te dar\xe9 un breve ejemplo para que entiendas mejor la idea con una peque\xf1a explicaci\xf3n."),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-rb"}),'# Iniciaremos una funci\xf3n con el par\xe1metro nombre.\ndef persona(nombre)\n    nombre = nombre # Aqu\xed asignamos un valor al par\xe1metro con una variable que almacene el valor del par\xe1metro.\n    puts "Hola, #{nombre}!" # Aqu\xed vamos a mostrar el resultado.\nend\n\npersona("Monspeet")\n\n# Ahora, vamos a ver su funcionamiento.\nHola, Monspeet!\n')),Object(r.b)("h2",{id:"rangos"},"Rangos"),Object(r.b)("p",null,"En Ruby existe una caracter\xedstica llamada ",Object(r.b)("strong",{parentName:"p"},"Rangos"),", la cual tiene el funcionamiento de crear secuencias tanto num\xe9ricas como de Strings. A continuaci\xf3n veremos algunos ejemplos."),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-rb"}),'# Nota: to_a es un m\xe9todo que convierte a Array. Lo veremos m\xe1s adelante.\n\n# Rango con ambos puntos l\xedmites inclu\xeddos\n(1...5).to_a # Utilizamos to_a ya que los rangos no son almacenados como una lista y con dicho m\xe9todo los volvemos un array que es igual a una lista.\n# => Secuencia: [1, 2, 3, 4, 5]\n\n# Rango sin ambos puntos l\xedmites inclu\xeddos\n(1...5).to_a # No se incluye el \xfaltimo punto l\xedmite, es decir, el 5.\n# => Secuencia: [1, 2, 3, 4]\n\n# Rango de Strings.\n("a".."f")\n# => Secuencia: ["a", "b", "c", "d", "e", "f"]\n')),Object(r.b)("h4",{id:"m\xe9todos-para-los-rangos"},"M\xe9todos para los rangos"),Object(r.b)("p",null,"Los rangos en Ruby tienen m\xe9todos, algunos de ellos son los siguientes."),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-rb"}),"# Iniciamos un rango en una variable\nnumeros = (1..5)\nnumeros.include?(3) # => true | Retorna verdadero, ya que el rango contiene dicho n\xfamero.\nnumeros.min # => 1 | Valor m\xednimo del rango.\nnumeros.max # => 5 | Valor m\xe1ximo del rango.\n")),Object(r.b)("p",null,"Tambi\xe9n podemos utilizar el operador ",Object(r.b)("inlineCode",{parentName:"p"},"===")," para comprobar si un determinado valor se encuentra dentro de la secuencia del rango."),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-rb"}),'(1..5) === 5 # => true\n("a"..."f") === "f" # => false\n')),Object(r.b)("h2",{id:"arrays"},"Arrays"),Object(r.b)("p",null,"Un Array es un conjunto ordenado, y cada elemento que contiene es una variable que se puede leer y escribir/reescribir."),Object(r.b)("p",null,"Los Arrays se inician con llaves ",Object(r.b)("inlineCode",{parentName:"p"},"[ ]")," y en Ruby inician desde la posici\xf3n 0."),Object(r.b)("p",null,"Cuando se almacena un valor en un Array, se dan dos objetos: \xedndice y valor. Y posteriormente se puede obtener dicho valor gracias al \xedndice."),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-rb"}),"# Iniciaremos un Array y leeremos sus objetos.\narray = [1, 2, 3, 4, 5]\n\narray[0] # => 1\narray[1] # => 2\narray[2] # => 3\narray[3] # => 4\narray[4] # => 5\n\n# Si el objeto no existe, retornar\xe1 nil (null en otros lenguajes)\narray[5] # => nil\n\n# Ahora, podemos agregar m\xe1s objetos al Array, asignando valores espec\xedficos o usando el m\xe9todo push\n\narray[5] = 6\n# => [1, 2, 3, 4, 5, 6]\n\narray.push(7)\n# => [1, 2, 3, 4, 5, 6, 7]\n")),Object(r.b)("p",null,"Los Array tambi\xe9n pueden anidarse, es decir, pueden haber arrays dentro de arrays."),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-rb"}),'array = [1, 2, 3, ["uno", "dos", "tres"]]\narray[3] # => ["uno", "dos", "tres"]\narray[3][0] # => "uno"\n')),Object(r.b)("h4",{id:"facilitando-su-creaci\xf3n"},"Facilitando su creaci\xf3n"),Object(r.b)("p",null,"Sabemos muy bien que crear Arrays suele ser una tarea tediosa debido a la colocaci\xf3n de comillas y comas, sin embargo, \xa1Ruby tiene la soluci\xf3n para ello!"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"%w")," es aquello que nos va a facilitar crear Arrays, pues automatiza la colocaci\xf3n de comillas y comas."),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-rb"}),'array = ["esto", "es", "tedioso", "lol"]\narray # => ["esto", "es", "tedioso", "lol"]\n\narray = %w[esto es sencillo]\narray = ["esto", "es", "sencillo"]\n')),Object(r.b)("h2",{id:"hashes"},"Hashes"),Object(r.b)("p",null,"Los hashes, tambi\xe9n conocidos como mapas o diccionarios, se parecen a los Arrays ya que son una colecci\xf3n de objetos indexadas. Sin embargo, en los hashes los \xedndices pueden indexar con cualquier tipo de dato, a diferencia de los Arrays donde los \xedndices son s\xf3lo num\xe9ricos."),Object(r.b)("p",null,"Los hashes en comparaci\xf3n a los Arrays, tienen una gran y significante ventaja, la cual es que se puede usar cualquier objeto como \xedndice, pudiendo as\xed tener un c\xf3digo m\xe1s legible. Sin embargo, en los hashes los elementos no est\xe1n ordenados."),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-rb"}),"hash = {'ceo' => 'Lauuu', 'admin' => 'Monspeet'}\n# => {'ceo' => 'Lauuu', 'admin' => 'Monspeet'}\nputs hash['ceo'] # => 'Lauuu'\n")),Object(r.b)("h3",{id:"usando-s\xedmbolos-como-\xedndices"},"Usando s\xedmbolos como \xedndices"),Object(r.b)("h4",{id:"s\xedmbolos"},"S\xedmbolos"),Object(r.b)("p",null,"Los s\xedmbolos se parecen a las variables, pero \xe9stos est\xe1n precedidos de dos puntos ",Object(r.b)("inlineCode",{parentName:"p"},":"),"."),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-rb"}),":nombre\n:edad\n")),Object(r.b)("p",null,"Debido a las ventajas anteriormente mencionadas, se utilizan s\xedmbolos como \xedndices."),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-rb"}),"hash = {:ceo => 'Lauuu', :admin => 'Monspeet'}\n# => {:ceo => 'Lauuu', :admin => 'Monspeet'}\nputs hash[:ceo] # => 'Lauuu'\n")),Object(r.b)("p",null,"Tambi\xe9n puedes crear hashes con el m\xe9todo ",Object(r.b)("inlineCode",{parentName:"p"},"new")," de la clase ",Object(r.b)("inlineCode",{parentName:"p"},"Hash"),"."),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-rb"}),'calificaciones = Hash.new\ncalificaciones["Monspeet"] = 10\n# => {"Monspeet" => 10}\n')),Object(r.b)("p",null,"Puedes ver todos los m\xe9todos de la clase ",Object(r.b)("inlineCode",{parentName:"p"},"Hash")," ",Object(r.b)("a",o({parentName:"p"},{href:"%22https://ruby-doc.org/core-2.6.5/Hash.html%60"}),"aqu\xed")),Object(r.b)("h2",{id:"bloques"},"Bloques"),Object(r.b)("p",null,"Los bloques de c\xf3digo son porciones de c\xf3digo\xa0con una o m\xe1s declaraciones y sentencias.\xa0Los bloques de c\xf3digo se encuentran dentro de llaves ",Object(r.b)("inlineCode",{parentName:"p"},"{}")," o ",Object(r.b)("inlineCode",{parentName:"p"},"do...end"),"."),Object(r.b)("p",null,"Los bloques est\xe1n hechos para agrupar instrucciones y s\xf3lo se pueden usar luego de un m\xe9todo."),Object(r.b)("h3",{id:"yield"},"Yield"),Object(r.b)("p",null,"Los m\xe9todos pueden utilizar los bloques mediante la palabra clave ",Object(r.b)("inlineCode",{parentName:"p"},"yield"),"."),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{}),'def administradores\n    puts "Monspeet"\n    yield\n    puts "Devsaider"\nend\n\n# => :metodo\n\nmetodo { puts "Lauuu" }\n\n=begin\n=> "Monspeet"\n=> "Lauuu"\n=> "Devsaider"\n=end\n')),Object(r.b)("p",null,"En Ruby, los bloques de c\xf3digo entre ",Object(r.b)("inlineCode",{parentName:"p"},"{}")," suele usarse s\xf3lo para una l\xednea de c\xf3digo, mientras que los bloques de c\xf3digo entre ",Object(r.b)("inlineCode",{parentName:"p"},"do...end")," suele usarse para varias l\xedneas de c\xf3digo."),Object(r.b)("h2",{id:"condicionales"},"Condicionales"),Object(r.b)("p",null,"Las condicionales son aquellos bloques que realizan ciertas acciones dependiendo de situaciones espec\xedficas en nuestro c\xf3digo. Sus palabras clave son ",Object(r.b)("inlineCode",{parentName:"p"},"if"),", ",Object(r.b)("inlineCode",{parentName:"p"},"else"),", ",Object(r.b)("inlineCode",{parentName:"p"},"elsif")," y ",Object(r.b)("inlineCode",{parentName:"p"},"case"),". Y como las funciones en Ruby, terminan con un ",Object(r.b)("inlineCode",{parentName:"p"},"end"),". Adem\xe1s, al igual que las funciones, \xa1pueden anidarse una dentro de otra sin problema!"),Object(r.b)("p",null,"Las condicionales son mucho m\xe1s sencillas de lo que parecen, as\xed que sin m\xe1s pre\xe1mbulo, veamos un ejemplo de una estructura IF/ELSIF."),Object(r.b)("h3",{id:"if--elsif"},"IF / ELSIF"),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-rb"}),"# Crearemos una variable, que contenga el valor 5.\nnumero = 5\n\n=begin\nLuego, crearemos nuestra condicional.\nSi el n\xfamero es inferior a 5, retornar\xe1 falso.\nSi el n\xfamero es superior a 5, retornar\xe1 falso.\nSi el n\xfamero es igual a 5, retornar\xe1 verdadero.\nEn ese mismo orden estar\xe1 estructurado.\n=end\n\nif numero < 5\n    false\nelsif numero > 5\n    false\nelsif numero == 5\n    true\nend\n\n# => true\n")),Object(r.b)("h3",{id:"if--else-if"},"IF / ELSE IF"),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-rb"}),'numero = 5\n\nif numero < 5\n    if numero >= 3\n        puts "El n\xfamero es mayor o igual a 3, pero menor a 5"\n    end\nelse if numero >= 5\n    puts "El n\xfamero es mayor o igual a 5"\nend\n\n# => "El n\xfamero es mayor o igual a 5"\n')),Object(r.b)("h3",{id:"diferencias-ifelsif---ifelse-if"},"Diferencias IF/ELSIF - IF/ELSE IF"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",o({parentName:"tr"},{align:"center"}),"IF / ELSIF"),Object(r.b)("th",o({parentName:"tr"},{align:"left"}),"IF / ELSE IF"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",o({parentName:"tr"},{align:"center"}),"Se utiliza cuando se requieren 2 o m\xe1s ",Object(r.b)("strong",{parentName:"td"},"condiciones no anidadas"),"."),Object(r.b)("td",o({parentName:"tr"},{align:"left"}),"Se utiliza cuando se requieren ",Object(r.b)("strong",{parentName:"td"},"condiciones anidadas")," dentro de otras condiciones.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",o({parentName:"tr"},{align:"center"}),"Tienen un solo cierre, y pueden utilizar else."),Object(r.b)("td",o({parentName:"tr"},{align:"left"}),"Cada ",Object(r.b)("strong",{parentName:"td"},"IF/ELSE IF")," tiene su cierre propio, y pueden utilizar else.")))),Object(r.b)("h3",{id:"operadores-condicionales"},"Operadores condicionales"),Object(r.b)("p",null,"Los operadores est\xe1n presentes en todos los lenguajes, y sirven para realizar condicionales. Dichos signos (operadores condicionales) son los siguientes."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",o({parentName:"tr"},{align:"center"}),"Signo"),Object(r.b)("th",o({parentName:"tr"},{align:"left"}),"Significado"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",o({parentName:"tr"},{align:"center"}),"=="),Object(r.b)("td",o({parentName:"tr"},{align:"left"}),"Igual a")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",o({parentName:"tr"},{align:"center"}),"!="),Object(r.b)("td",o({parentName:"tr"},{align:"left"}),"Distinto")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",o({parentName:"tr"},{align:"center"}),"==="),Object(r.b)("td",o({parentName:"tr"},{align:"left"}),"Conjunto")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",o({parentName:"tr"},{align:"center"}),">"),Object(r.b)("td",o({parentName:"tr"},{align:"left"}),"Mayor que")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",o({parentName:"tr"},{align:"center"}),"<"),Object(r.b)("td",o({parentName:"tr"},{align:"left"}),"Mayor que")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",o({parentName:"tr"},{align:"center"}),">="),Object(r.b)("td",o({parentName:"tr"},{align:"left"}),"Igual o mayor")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",o({parentName:"tr"},{align:"center"}),"<="),Object(r.b)("td",o({parentName:"tr"},{align:"left"}),"Igual o menor")))),Object(r.b)("h3",{id:"condicionales-negativas"},"Condicionales negativas"),Object(r.b)("p",null,"Las condicionales negativas son aquellas condicionales cuya finalidad es retornar un valor cuando no se espera el resultado especificado en ella, si no, un valor alterno."),Object(r.b)("p",null,"Para estas condicionales, utilizamos el operador ",Object(r.b)("inlineCode",{parentName:"p"},"!=")," (Distinto)."),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-rb"}),'numero = 4\n\nif numero != 5\n    puts "El valor de la variable numero no es 5!"\nelse\n    puts "El valor de la variable numero es 5!"\nend\n\n# => "El valor de la variable numero no es 5!", es decir, true.\n')),Object(r.b)("h3",{id:"unless"},"UNLESS"),Object(r.b)("p",null,"Unless es el lado oscuro de ",Object(r.b)("inlineCode",{parentName:"p"},"IF"),", ya que con ",Object(r.b)("inlineCode",{parentName:"p"},"IF")," el bloque se ejecuta cuando la condici\xf3n se cumple; con ",Object(r.b)("inlineCode",{parentName:"p"},"unless")," el bloque se ejecuta cuando la condici\xf3n ",Object(r.b)("strong",{parentName:"p"},"no se cumple"),"."),Object(r.b)("p",null,"Unless es igual a una condicional estructurada por ",Object(r.b)("inlineCode",{parentName:"p"},"IF"),". (do ... end), \xa1as\xed que no habr\xe1 dolores de cabeza!"),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-rb"}),'nombre = "Monspeet"\n\nunless nombre == "Lauuu"\n    puts "Tu nombre no es Lauuu."\nend\n\n# => "Tu nombre no es Lauuu."\n')),Object(r.b)("h3",{id:"case"},"Case"),Object(r.b)("p",null,"Case, conocido como ",Object(r.b)("inlineCode",{parentName:"p"},"switch")," en otros lenguajes, es una instrucci\xf3n similar a ",Object(r.b)("inlineCode",{parentName:"p"},"if")," en la cual se crean una serie de condicionales en las donde se ejecuta la primera condicional que se cumpla."),Object(r.b)("p",null,"Case utiliza la palabra clave ",Object(r.b)("inlineCode",{parentName:"p"},"when")," para crear sus condicionales."),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-rb"}),'num1 = 5\nnum2 = 5\n\nsuma = num1 + num2\n\ncase suma\nwhen 8 then\n    puts "El resultado es 8"\nwhen 10 then\n    puts "El resultado es 10"\nend\n\n# => "El resultado es 10"\n')),Object(r.b)("h2",{id:"bucles"},"Bucles"),Object(r.b)("p",null,"Los bucles son bloques de c\xf3digo que se ejecutan un n\xfamero espec\xedfico de veces. Ruby en particular, tiene algunos bucles m\xe1s adem\xe1s de los tradicionales (while, do...while, for), dichos bucles son (until, loop). Sin embargo, ",Object(r.b)("strong",{parentName:"p"},"Ruby no posee el bucle do...while")),Object(r.b)("p",null,"A continuaci\xf3n, veremos cada uno de esos bucles."),Object(r.b)("h3",{id:"while"},"While"),Object(r.b)("p",null,"While es un bucle el cual verifica la condici\xf3n antes de ejecutar el c\xf3digo y se detiene cuando la condici\xf3n retorna ",Object(r.b)("inlineCode",{parentName:"p"},"false"),"."),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-rb"}),'numero = 0\n\nwhile numero < 5\n    puts "La variable numero es #{numero}"\n    numero += 5\nend\n\n=begin\n=> La variable numero es 0\n=> La variable numero es 1\n=> La variable numero es 2\n=> La variable numero es 3\n=> La variable numero es 4\n=end\n')),Object(r.b)("h3",{id:"until"},"Until"),Object(r.b)("p",null,'Until podr\xedamos llamarlo como "bucle de unless", debido a que es igual; mientras la condici\xf3n sea falsa, se cumplir\xe1.'),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-rb"}),'numero = 0\n\nuntil numero > 5\n    puts "La variable numero es #{numero}"\n    numero += 1\nend\n\n=begin\n=> La variable numero es 0\n=> La variable numero es 1\n=> La variable numero es 2\n=> La variable numero es 3\n=> La variable numero es 4\n=> La variable numero es 5\n=end\n')),Object(r.b)("h3",{id:"loop"},"Loop"),Object(r.b)("p",null,"El bucle de Loop, consiste en el ciclado indefinido del bloque de c\xf3digo \xf3 una instrucci\xf3n. La \xfanica forma de detenerlo es usando la palabra clave ",Object(r.b)("inlineCode",{parentName:"p"},"break"),"."),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-rb"}),'numero = 0\n\nloop do\n    puts "La variable numero es #{numero}"\n    numero += 1\n    break if numero > 5\nend\n\n=begin\n=> La variable numero es 0\n=> La variable numero es 1\n=> La variable numero es 2\n=> La variable numero es 3\n=> La variable numero es 4\n=> La variable numero es 5\n=end\n')),Object(r.b)("h3",{id:"for"},"For"),Object(r.b)("p",null,"Por \xfaltimo, tenemos al bucle ",Object(r.b)("inlineCode",{parentName:"p"},"for")," que a pesar de confundir un poco al inicio, es realmente sencillo."),Object(r.b)("p",null,"Mientras que en otros lenguajes For usa la sintaxis ",Object(r.b)("inlineCode",{parentName:"p"},"for (i=0; i<5; i++)"),", en Ruby se simplifica, \xa1limit\xe1ndose al nombre de la variable y el intervalo!"),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-rb"}),'for i in (0..5)\n    puts "El valor es #{i}"\nend\n\n=begin\n=> El valor es 0\n=> El valor es 1\n=> El valor es 2\n=> El valor es 3\n=> El valor es 4\n=> El valor es 5\n=end\n')),Object(r.b)("h3",{id:"comandos"},"Comandos"),Object(r.b)("p",null,"En los bucles de Ruby, poseemos ciertas palabras clave o comandos que nos podr\xe1n ser de utilidad."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",o({parentName:"tr"},{align:"center"}),"palabra clave"),Object(r.b)("th",o({parentName:"tr"},{align:"center"}),"Significado"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",o({parentName:"tr"},{align:"center"}),"break"),Object(r.b)("td",o({parentName:"tr"},{align:"center"}),"Finaliza el bucle")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",o({parentName:"tr"},{align:"center"}),"next"),Object(r.b)("td",o({parentName:"tr"},{align:"center"}),"Se adelanta a la siguiente interacci\xf3n del bucle")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",o({parentName:"tr"},{align:"center"}),"redo"),Object(r.b)("td",o({parentName:"tr"},{align:"center"}),"Se repite el bucle ignorando la verificaci\xf3n de la condici\xf3n")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",o({parentName:"tr"},{align:"center"}),"retry"),Object(r.b)("td",o({parentName:"tr"},{align:"center"}),"Se repite el bucle tomando en cuenta la verificaci\xf3n de la condici\xf3n")))),Object(r.b)("h2",{id:"irb"},"IRB"),Object(r.b)("p",null,"La IRB es una REPL (",Object(r.b)("strong",{parentName:"p"},"read-eval-print-bucle")," / ",Object(r.b)("strong",{parentName:"p"},"leer-evaluar-imprimir-bucle"),") hecha en Ruby, para dicho lenguaje. Una REPL es tambi\xe9n conocida como ",Object(r.b)("inlineCode",{parentName:"p"},"shell"),"."),Object(r.b)("p",null,"Para utilizar esta shell, s\xf3lo debemos escribir en nuestra terminal ",Object(r.b)("inlineCode",{parentName:"p"},"irb"),"; para salir de la shell, escribimos ",Object(r.b)("inlineCode",{parentName:"p"},"exit"),"."))}c.isMDXComponent=!0},221:function(e,n,a){"use strict";a.d(n,"a",(function(){return s})),a.d(n,"b",(function(){return u}));var r=a(0),o=a.n(r),t=o.a.createContext({}),l=function(e){var n=o.a.useContext(t),a=n;return e&&(a="function"==typeof e?e(n):Object.assign({},n,e)),a},s=function(e){var n=l(e.components);return o.a.createElement(t.Provider,{value:n},e.children)};var i="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},b=Object(r.forwardRef)((function(e,n){var a=e.components,r=e.mdxType,t=e.originalType,s=e.parentName,i=function(e,n){var a={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&-1===n.indexOf(r)&&(a[r]=e[r]);return a}(e,["components","mdxType","originalType","parentName"]),b=l(a),u=r,d=b[s+"."+u]||b[u]||c[u]||t;return a?o.a.createElement(d,Object.assign({},{ref:n},i,{components:a})):o.a.createElement(d,Object.assign({},{ref:n},i))}));function u(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var t=a.length,l=new Array(t);l[0]=b;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[i]="string"==typeof e?e:r,l[1]=s;for(var u=2;u<t;u++)l[u]=a[u];return o.a.createElement.apply(null,l)}return o.a.createElement.apply(null,a)}b.displayName="MDXCreateElement"}}]);
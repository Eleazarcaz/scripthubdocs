(window.webpackJsonp=window.webpackJsonp||[]).push([[64],{198:function(e,n,a){"use strict";a.r(n),a.d(n,"frontMatter",(function(){return t})),a.d(n,"rightToc",(function(){return l})),a.d(n,"default",(function(){return c}));a(51),a(24),a(19),a(20),a(52),a(0);var o=a(227);function r(){return(r=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var a=arguments[n];for(var o in a)Object.prototype.hasOwnProperty.call(a,o)&&(e[o]=a[o])}return e}).apply(this,arguments)}var t={id:"nuestro primer programa",title:"Nuestro primer programa",sidebar_label:"Nuestro primer programa"},l=[{value:"Hola Mundo",id:"hola-mundo",children:[]},{value:"Hola Mundo",id:"hola-mundo-1",children:[]},{value:"N\xfameros",id:"n\xfameros",children:[]},{value:"Strings",id:"strings",children:[]},{value:"Variables",id:"variables",children:[]},{value:"Comentarios",id:"comentarios",children:[]},{value:"Introduciendo datos",id:"introduciendo-datos",children:[]},{value:"Ejercicio",id:"ejercicio",children:[]}],s={rightToc:l},i="wrapper";function c(e){var n=e.components,a=function(e,n){if(null==e)return{};var a,o,r={},t=Object.keys(e);for(o=0;o<t.length;o++)a=t[o],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,["components"]);return Object(o.b)(i,r({},s,a,{components:n,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"hola-mundo"},"Hola Mundo"),Object(o.b)("p",null,"Ya hemos instalado Ruby en el cap\xedtulo anterior y hemos dado una introducci\xf3n al lenguaje, as\xed que ahora nos tocar\xe1 empezar a trabajar en \xe9l!"),Object(o.b)("p",null,"Como en todo lenguaje que vamos aprendiendo, haremos un programa que muestre un hola mundo."),Object(o.b)("p",null,"En Ruby hay 2 formas de mostrar contenido en la terminal,  ",Object(o.b)("inlineCode",{parentName:"p"},"puts")," y  ",Object(o.b)("inlineCode",{parentName:"p"},"print"),". A continuaci\xf3n veremos en qu\xe9 se diferencian para saber cu\xe1l elegir en cada caso."),Object(o.b)("p",null,"| puts | print |"),Object(o.b)("h2",{id:"hola-mundo-1"},"Hola Mundo"),Object(o.b)("p",null,"Ya hemos instalado Ruby en el cap\xedtulo anterior y hemos dado una introducci\xf3n al lenguaje, as\xed que ahora nos tocar\xe1 empezar a trabajar en \xe9l!"),Object(o.b)("p",null,"Como en todo lenguaje que vamos aprendiendo, haremos un programa que muestre un hola mundo."),Object(o.b)("p",null,"En Ruby hay 2 formas de mostrar contenido en la terminal,  ",Object(o.b)("inlineCode",{parentName:"p"},"puts")," y  ",Object(o.b)("inlineCode",{parentName:"p"},"print"),". A continuaci\xf3n veremos en qu\xe9 se diferencian para saber cu\xe1l elegir en cada caso."),Object(o.b)("table",null,Object(o.b)("thead",{parentName:"table"},Object(o.b)("tr",{parentName:"thead"},Object(o.b)("th",r({parentName:"tr"},{align:"center"}),"puts"),Object(o.b)("th",r({parentName:"tr"},{align:"center"}),"print"))),Object(o.b)("tbody",{parentName:"table"},Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",r({parentName:"tr"},{align:"center"}),"muestra el contenido y hace un salto de l\xednea"),Object(o.b)("td",r({parentName:"tr"},{align:"center"}),"muestra el contenido sin hacer salto de l\xednea")))),Object(o.b)("p",null,"Con nuestro primer programa (Hola mundo), usaremos puts. Para crear nuestro programa vamos a seguir una serie de pasos muy sencillos que veremos a continuaci\xf3n, pero antes unos requisitos previos."),Object(o.b)("table",null,Object(o.b)("thead",{parentName:"table"},Object(o.b)("tr",{parentName:"thead"},Object(o.b)("th",r({parentName:"tr"},{align:"center"}),"Prerrequisitos"))),Object(o.b)("tbody",{parentName:"table"},Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",r({parentName:"tr"},{align:"center"}),"Tener instalado Ruby")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",r({parentName:"tr"},{align:"center"}),"Tener un editor de c\xf3digo o IDE")))),Object(o.b)("p",null,"Ya teniendo eso, empezaremos con nuestros pasos.\n1. Crear un nuevo archivo que termine con la extensi\xf3n ",Object(o.b)("inlineCode",{parentName:"p"},".rb"),", en esta gu\xeda utilizaremos ",Object(o.b)("inlineCode",{parentName:"p"},"hola_mundo.rb"),".\n2. Abrir nuestro archivo con nuestro editor de c\xf3digo\n3. Escribir en nuestro archivo la l\xednea de c\xf3digo ",Object(o.b)("inlineCode",{parentName:"p"},'puts "Hola mundo!"'),".\n4. Guardar nuestro archivo y ejecutarlo, utilizando ",Object(o.b)("inlineCode",{parentName:"p"},"ruby hola_mundo.rb"),"."),Object(o.b)("p",null,"Esto tendr\xe1 como resultado lo siguiente."),Object(o.b)("pre",null,Object(o.b)("code",r({parentName:"pre"},{className:"language-console"}),"$ ruby hola_mundo.rb\nHola mundo!\n")),Object(o.b)("h2",{id:"n\xfameros"},"N\xfameros"),Object(o.b)("p",null,"En Ruby, podemos utilizar n\xfameros enteros, decimales y realizar operaciones matem\xe1ticas b\xe1sicas con ellos de manera nativa, es decir, sin librer\xedas externas."),Object(o.b)("pre",null,Object(o.b)("code",r({parentName:"pre"},{className:"language-rb"}),"2 + 2 # => 4\n2 - 2 # => 0\n2 * 2 # => 4\n2 / 2 # => 1\n\n1.5 + 1.5 # => 3.0\n")),Object(o.b)("p",null,"Para redondear n\xfameros en Ruby, podemos utilizar el m\xe9todo ",Object(o.b)("inlineCode",{parentName:"p"},"round"),"."),Object(o.b)("pre",null,Object(o.b)("code",r({parentName:"pre"},{}),"decimal = 1.5 + 1.5 # => 3.0\ndecimal.round # => 3\n")),Object(o.b)("h2",{id:"strings"},"Strings"),Object(o.b)("p",null,"En Ruby, podemos hacer montones de cosas con las Strings, que, adem\xe1s, tienen ciertas diferencias al usar comillas dobles ",Object(o.b)("inlineCode",{parentName:"p"},'" "')," y comillas simples ",Object(o.b)("inlineCode",{parentName:"p"},"' '"),"."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"\xbfCu\xe1les son estas diferencias?")),Object(o.b)("p",null,"Estas diferencias son m\xednimas, por lo cual no debemos darnos dolores de cabeza. La mayor diferencia, que es de la cual hablaremos, es que en Ruby, el tiempo de ejecuci\xf3n de las strings es m\xe1s r\xe1pido con comillas simples que con comillas dobles."),Object(o.b)("p",null,"En Ruby, para interpolar variables dentro de Strings, deberemos introducirlas dentro de ",Object(o.b)("inlineCode",{parentName:"p"},"#{}"),"; tambi\xe9n puedes utilizar la uni\xf3n de Strings. A continuaci\xf3n te dar\xe9 algunos ejemplos para que puedas ver las diferencias entre ambos modelos (veremos las variables m\xe1s adelante)."),Object(o.b)("pre",null,Object(o.b)("code",r({parentName:"pre"},{className:"language-rb"}),'# Con Interpolaci\xf3n de variables\nnombre = "Monspeet"\nputs "Hola, #{nombre}!"\n# => Hola, Monspeet!\n\n# Con uni\xf3n de Strings\nnombre = "Monspeet"\nputs "Hola, " + nombre\n# => Hola, Monspeet!\n')),Object(o.b)("p",null,"Tambi\xe9n, podemos aplicarles numerosos m\xe9todos a nuestras cadenas de Strings, tales como downcase, upcase, capitalize, length, etc. Ac\xe1 te ense\xf1ar\xe9 un ejemplo de los m\xe9todos ya mencionados."),Object(o.b)("pre",null,Object(o.b)("code",r({parentName:"pre"},{className:"language-rb"}),'# Primero asignare una String a una variable, llamada nombre.\nnombre = "Monspeet"\n\n# Downcase\nnombre.downcase\n# => "monspeet"\n\n# Upcase\nnombre.upcase\n# => "MONSPEET"\n\n# Capitalize\nnombre.capitalize\n# => "Monspeet"\n\n# Length\nnombre.lenght\n# => 8\n')),Object(o.b)("h2",{id:"variables"},"Variables"),Object(o.b)("p",null,"En Ruby los valores de las variables se asignan de forma autom\xe1tica (strings, int, boolean), lo cual hace mucho m\xe1s r\xe1pido hacer el c\xf3digo. Existen 5 tipos distintos de variables; normales, constantes, globales, de instancia y de clase (estas \xfaltimas 2 las veremos m\xe1s adelante)."),Object(o.b)("p",null,"Si ya vienes con conocimientos previos de alg\xfan otro lenguaje posiblemente ya conozcas los primeros dos tipos, si no es as\xed, ac\xe1 aprender\xe1s sus caracter\xedsticas. Cabe destacar que las variables deben empezar siempre con una letra, no pueden ser establecidas con n\xfameros o s\xedmbolos (a excepci\xf3n de las variables globales que inician con ",Object(o.b)("inlineCode",{parentName:"p"},"$"),", variables de instancia que inician con ",Object(o.b)("inlineCode",{parentName:"p"},"@")," y variables de clase que inician con ",Object(o.b)("inlineCode",{parentName:"p"},"@@"),")."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Variable normal.")),Object(o.b)("p",null,"Las variables normales son aquellas que son completamente min\xfasculas, como cualquier variable puede contener cualquier tipo de dato y el mismo ser reemplazado."),Object(o.b)("pre",null,Object(o.b)("code",r({parentName:"pre"},{className:"language-rb"}),'# Asignando el valor\nnombre = "Monspeet"\n\n# Reemplazando el valor\nnombre = "Lauuu"\n')),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Variable constante.")),Object(o.b)("p",null,"Las variables constantes empiezan o son completamente may\xfasculas, y al igual que una variable normal puede contener cualquier tipo de dato. Si vienes de otro lenguaje, las variables constantes de Ruby tienen una diferencia a las de lenguajes como JavaScript, esta diferencia es que en Ruby, dichas variables pueden cambiar sus valores."),Object(o.b)("pre",null,Object(o.b)("code",r({parentName:"pre"},{className:"language-rb"}),'OCUPACION = "administrador"\n# O tambi\xe9n es v\xe1lido\nOcupacion = "administrador"\n')),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Variables Globales.")),Object(o.b)("p",null,"Una variable global tiene un nombre que comienza con el s\xedmbolo ",Object(o.b)("inlineCode",{parentName:"p"},"$"),". Se puede utilizar en cualquier parte de un programa, aunque se debe evitar usar mucho una variable global debido a que podr\xeda dificultar localizar errores."),Object(o.b)("pre",null,Object(o.b)("code",r({parentName:"pre"},{className:"language-rb"}),'$conocimientos = "Ruby, BASH, JS"\n')),Object(o.b)("h2",{id:"comentarios"},"Comentarios"),Object(o.b)("p",null,"Los comentarios son una parte del c\xf3digo que nos sirve para documentar y llevar un orden sobre qu\xe9 hace cada l\xednea de c\xf3digo. Cabe destacar que, el programa no los lee as\xed que no los ejecuta, lo cual no nos causar\xe1 problemas."),Object(o.b)("p",null,"Los comentarios en Ruby, son 2 tipos al igual que en el resto de lenguajes. Comentario de una l\xednea y, comentario de m\xfaltiples l\xedneas. Adem\xe1s, en Ruby para que los comentarios de m\xfaltiples l\xedneas funcionen, no deben tener indentaciones (espacios)."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Comentarios de una l\xednea.")),Object(o.b)("p",null,"Estos comentarios son aquellos que usan ",Object(o.b)("inlineCode",{parentName:"p"},"#"),"."),Object(o.b)("pre",null,Object(o.b)("code",r({parentName:"pre"},{className:"language-rb"}),"# Esto es un comentario de una l\xednea\n# No es le\xeddo por el programa\n")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Comentarios de m\xfaltiples l\xedneas.")),Object(o.b)("p",null,"Son aquellos que empiezan con ",Object(o.b)("inlineCode",{parentName:"p"},"=begin")," y terminan con ",Object(o.b)("inlineCode",{parentName:"p"},"=end"),". Y que como hemos mencionado anteriormente, obedecen a una regla para funcionar."),Object(o.b)("pre",null,Object(o.b)("code",r({parentName:"pre"},{className:"language-rb"}),"# Uso correcto, sin indentaciones\n=begin\nEsto es\nun comentario de\nm\xfaltiples l\xedneas\n=end\n\n# Uso incorrecto, con indentaciones\n  =begin\n  Esto es\n  un comentario de\n  m\xfaltiples l\xedneas\n  =end\n")),Object(o.b)("h2",{id:"introduciendo-datos"},"Introduciendo datos"),Object(o.b)("p",null,"Probablemente hayas visto en algunos programas que se solicita al usuario que ingrese alg\xfan dato y luego este es guardado y hayas querido saber c\xf3mo hacerlo. Este proceso se llama prompt."),Object(o.b)("p",null,"Pues en Ruby esto es un trabajo sencillo y muy c\xf3modo de realizar, para ello utilizaremos ",Object(o.b)("inlineCode",{parentName:"p"},"gets"),". Es una funci\xf3n que obtiene datos ingresados por el usuario en la terminal. Y sin m\xe1s pre\xe1mbulo, te dejar\xe9 un ejemplo."),Object(o.b)("pre",null,Object(o.b)("code",r({parentName:"pre"},{className:"language-rb"}),'# Archivo.rb\nprint "Ingresa tu nombre: "\nnombre = gets\nputs "Tu nombre es #{nombre}"\n\n# Terminal\n$ ruby Archivo.rb\nIngresa tu nombre: Monspeet\nTu nombre es Monspeet\n')),Object(o.b)("p",null,"Ya visto el ejemplo de su funcionamiento, procederemos a aprender su m\xe9todo ",Object(o.b)("inlineCode",{parentName:"p"},"chomp"),". Por defecto, ",Object(o.b)("inlineCode",{parentName:"p"},"gets")," obtiene los datos y les agrega un salto de l\xednea. Por ello debemos utilizar ",Object(o.b)("inlineCode",{parentName:"p"},"chomp"),", ya que su funci\xf3n es eliminar los saltos de l\xednea."),Object(o.b)("h2",{id:"ejercicio"},"Ejercicio"),Object(o.b)("p",null,"Como ya hemos visto en todo este m\xf3dulo lo b\xe1sico de Ruby, podremos proceder a realizar un ejercicio con lo aprendido para reforzar nuestros aprendizajes."),Object(o.b)("p",null,"Dicho ejercicio constar\xe1 de crear un programa que obtenga los siguientes datos del usuario y los muestre en pantalla: nombre, edad, pa\xeds."))}c.isMDXComponent=!0},227:function(e,n,a){"use strict";a.d(n,"a",(function(){return s})),a.d(n,"b",(function(){return u}));var o=a(0),r=a.n(o),t=r.a.createContext({}),l=function(e){var n=r.a.useContext(t),a=n;return e&&(a="function"==typeof e?e(n):Object.assign({},n,e)),a},s=function(e){var n=l(e.components);return r.a.createElement(t.Provider,{value:n},e.children)};var i="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},b=Object(o.forwardRef)((function(e,n){var a=e.components,o=e.mdxType,t=e.originalType,s=e.parentName,i=function(e,n){var a={};for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&-1===n.indexOf(o)&&(a[o]=e[o]);return a}(e,["components","mdxType","originalType","parentName"]),b=l(a),u=o,d=b[s+"."+u]||b[u]||c[u]||t;return a?r.a.createElement(d,Object.assign({},{ref:n},i,{components:a})):r.a.createElement(d,Object.assign({},{ref:n},i))}));function u(e,n){var a=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var t=a.length,l=new Array(t);l[0]=b;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[i]="string"==typeof e?e:o,l[1]=s;for(var u=2;u<t;u++)l[u]=a[u];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,a)}b.displayName="MDXCreateElement"}}]);